#!/usr/bin/env node

/**
 * Module dependencies.
 */

var myProxy = require('../proxy');
var myApp=require('../app');
var debug = require('debug')('seat-api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');

//引入配置文件
var config = require('../app_need/config');
console.log('当前运行环境为：' + config.env);
// 将端口号设置为配置文件的端口号，默认值为3000
var port = normalizePort(config.port || '3000');
// 打印输出端口号
// console.log('项目运行监听端口号为：' + port);

myProxy.set('port', port);
myApp.set('port',8090); 

/**
 * Create HTTP server.
 */

var server = http.createServer(myProxy);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,()=>{
  console.log('项目运行监听端口号为：' + port);
});

// myApp.listen(8090, () => {
//   console.log('接口API监听端口号为：8090')
// })

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}